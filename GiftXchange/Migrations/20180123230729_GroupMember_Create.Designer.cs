// <auto-generated />
using GiftXchange.Data;
using GiftXchange.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GiftXchange.Migrations
{
    [DbContext(typeof(GXContext))]
    [Migration("20180123230729_GroupMember_Create")]
    partial class GroupMember_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GiftXchange.Models.Group", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("dateCreated");

                    b.Property<string>("description");

                    b.Property<string>("guid")
                        .IsRequired();

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ownerId")
                        .IsRequired();

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("id");

                    b.HasIndex("ownerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("GiftXchange.Models.GroupMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("addedBy");

                    b.Property<string>("ageGroup")
                        .HasMaxLength(128);

                    b.Property<DateTime>("dateAdded");

                    b.Property<DateTime>("dateJoined");

                    b.Property<string>("familyName")
                        .HasMaxLength(128);

                    b.Property<int>("groupid");

                    b.Property<string>("memberId")
                        .IsRequired();

                    b.Property<string>("role")
                        .HasMaxLength(128);

                    b.Property<int>("status");

                    b.HasKey("id");

                    b.HasIndex("groupid");

                    b.HasIndex("memberId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("GiftXchange.Models.GXUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("birthDate");

                    b.Property<DateTime>("dateJoined");

                    b.Property<string>("facebookId");

                    b.Property<string>("firstName")
                        .HasMaxLength(128);

                    b.Property<string>("gender");

                    b.Property<string>("googleId");

                    b.Property<string>("lastName")
                        .HasMaxLength(128);

                    b.Property<string>("nickname")
                        .HasMaxLength(128);

                    b.Property<string>("photoUrl");

                    b.Property<string>("twitterId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GiftXchange.Models.List", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("dateCreated");

                    b.Property<DateTime>("dateUpdated");

                    b.Property<string>("description")
                        .HasMaxLength(500);

                    b.Property<string>("guid")
                        .IsRequired();

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ownerId")
                        .IsRequired();

                    b.Property<int>("priority");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("id");

                    b.HasIndex("ownerId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("GiftXchange.Models.ListItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("color")
                        .HasMaxLength(128);

                    b.Property<DateTime>("dateCreated");

                    b.Property<DateTime>("dateModified");

                    b.Property<string>("guid")
                        .IsRequired();

                    b.Property<int>("listid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("notes");

                    b.Property<int>("priority");

                    b.Property<string>("size")
                        .HasMaxLength(128);

                    b.Property<string>("url")
                        .HasMaxLength(500);

                    b.HasKey("id");

                    b.HasIndex("listid");

                    b.ToTable("ListItems");
                });

            modelBuilder.Entity("GiftXchange.Models.Notification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("date");

                    b.Property<string>("guid")
                        .IsRequired();

                    b.Property<string>("notification")
                        .IsRequired();

                    b.Property<string>("type")
                        .IsRequired();

                    b.Property<string>("url");

                    b.Property<string>("userId");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GiftXchange.Models.NotificationType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("createdById");

                    b.Property<DateTime>("dateCreated");

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("id");

                    b.HasIndex("createdById");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GiftXchange.Models.Group", b =>
                {
                    b.HasOne("GiftXchange.Models.GXUser", "owner")
                        .WithMany()
                        .HasForeignKey("ownerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GiftXchange.Models.GroupMember", b =>
                {
                    b.HasOne("GiftXchange.Models.Group", "group")
                        .WithMany()
                        .HasForeignKey("groupid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GiftXchange.Models.GXUser", "member")
                        .WithMany()
                        .HasForeignKey("memberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GiftXchange.Models.List", b =>
                {
                    b.HasOne("GiftXchange.Models.GXUser", "owner")
                        .WithMany()
                        .HasForeignKey("ownerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GiftXchange.Models.ListItem", b =>
                {
                    b.HasOne("GiftXchange.Models.List", "list")
                        .WithMany("items")
                        .HasForeignKey("listid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GiftXchange.Models.Notification", b =>
                {
                    b.HasOne("GiftXchange.Models.GXUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("GiftXchange.Models.NotificationType", b =>
                {
                    b.HasOne("GiftXchange.Models.GXUser", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GiftXchange.Models.GXUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GiftXchange.Models.GXUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GiftXchange.Models.GXUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GiftXchange.Models.GXUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
